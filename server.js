const express = require('express');
const app = express();

var server = require('http').Server(app);
// io is the socket.io server
// io is the pool of connections
let io = require("socket.io")(server);

let port = 8090;
let path = require('path')
app.use("/", express.static(path.join(__dirname, "dist/chatapp")));
// access the mp3, static resource, want to serve it from our web server
app.use("/", express.static(path.join(__dirname, "mp3")));

let translationList = [];

// Imports the Google Cloud client library
const {Translate} = require('@google-cloud/translate').v2;
projectId = "fit2095week6-324309"
// Instantiates a client
const translate = new Translate({projectId, keyFilename: __dirname + "/fit2095week6-324309-cc26e94f4eec.json"});

const fs = require("fs");
// imports the google cloud client library
const textToSpeech = require('@google-cloud/text-to-speech');
// creates a client
const client = new textToSpeech.TextToSpeechClient({projectId, keyFilename: __dirname + "/fit2095week6-324309-cc26e94f4eec.json"});

counter = 1;
counterTranslation = 1;

async function quickStart(newLanguage, inputText) {
  // convert to target langiage
  if (newLanguage == "French") {
    target = "fr"
  } else {
    target = "de"
  }

  // Translates some text
  const [translation] = await translate.translate(inputText, target);

  console.log(`Translation: ${translation}`);

  return translation
}


function textToAudio(text, translatedText, newLangauge) {
  // Construct the request
  const request = {
    input: { text: text },
    // Select the language and SSML Voice Gender (optional)
    voice: { languageCode: "en-US", ssmlGender: "NEUTRAL" },
    // Select the type of audio encoding
    audioConfig: { audioEncoding: "MP3" },
  };
  if (newLangauge == "French") {
    request2 = {
      input: { text: translatedText },
      // Select the language and SSML Voice Gender (optional)
      voice: { languageCode: "fr-FR", ssmlGender: "NEUTRAL" },
      // Select the type of audio encoding
      audioConfig: { audioEncoding: "MP3" },
    }
  } else {
    request2 = {
      input: { text: translatedText },
      // Select the language and SSML Voice Gender (optional)
      voice: { languageCode: "de-DE", ssmlGender: "NEUTRAL" },
      // Select the type of audio encoding
      audioConfig: { audioEncoding: "MP3" },
    }
  }


// Performs the Text-to-Speech request
  client.synthesizeSpeech(request, (err, response) => {
    if (err) {
      console.error("ERROR:", err);
      return;
    }
    // Write the binary audio content to a local file
    fs.writeFile(__dirname + "/mp3/output" + counter + ".mp3", response.audioContent, "binary", err => {
      if (err) {
        console.error("ERROR:", err);
        return;
      }

      console.log("Audio content written to file: output" + counter + ".mp3");
      path = "output" + counter + ".mp3";
      console.log('path: ' + path)

      counter++;
    });
  });

  client.synthesizeSpeech(request2, (err, response) => {
    if (err) {
      console.error("ERROR:", err);
      return;
    }
    // Write the binary audio content to a local file
    fs.writeFile(__dirname + "/mp3/translation" + counterTranslation + ".mp3", response.audioContent, "binary", err => {
      if (err) {
        console.error("ERROR:", err);
        return;
      }

      console.log("Audio content written to file: output" + counterTranslation + ".mp3");
      path2 = "translation" + counterTranslation + ".mp3";
      console.log('path2: ' + path2)

      let obj = {
        text: text,
        translation: translatedText,
        audioSpeech: path,
        audioSpeechTranslation: path2
      }

      console.log(obj)
      translationList.push(obj)
      console.log(translationList)

      // the server then emits the translation back to all clients using a socket.io event
      io.sockets.emit("translateResult", translationList)

      counterTranslation++;
    });
  });



}

io.on("connection", socket => {
  console.log("new connection made from client with ID="+socket.id);


  socket.on('translator', (data) => {
    // the server translates the text to the target language, then converts the text to English speech
    // the server should be able to serve multiple clients concurrently
    quickStart(data.newLanguage, data.inputText).then((info) => {
      console.log('info')
      console.log(info)

      // the server saves the mp3 file that is generated by Google service locally.
      textToAudio(data.inputText, info, data.newLanguage)

    });
  })

});


server.listen(port, () => {
  console.log("Listening on port " + port);
  console.log('Server running at http://localhost:8090/');
});
